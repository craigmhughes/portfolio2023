import {animated, useSpring} from '@react-spring/three';
import {Physics, usePlane} from '@react-three/cannon';
import {OrthographicCamera, Plane} from '@react-three/drei';
import {Canvas} from '@react-three/fiber';

import type {NextPage} from 'next';
import Head from 'next/head';
import {useCallback, useEffect, useMemo, useRef, useState} from 'react';
import FocusLock from 'react-focus-lock';
import {MeshLambertMaterial} from 'three';

import Keyboard from '@/components/Keyboard';
import Text, {animateText} from '@/components/Text';
import styles from '@/styles/Home.module.css';

function Ground({...props}: any): JSX.Element {
    const [ref] = usePlane(() => ({rotation: [-Math.PI / 2, 0, 0], ...props}));

    return <Plane {...props} ref={ref} />;
}

const initAnimationStages = {
    introMessage: false,
};

const Home: NextPage = (): JSX.Element => {
    const groundRef = useRef();
    const [animationStages, setAnimationStages] = useState<Record<string, boolean>>({...initAnimationStages});
    const [subtitleText, setSubtitleText] = useState('');

    const cmdBox = useRef<HTMLInputElement>(null);
    const [cmdText, setCmdText] = useState('');
    const [cmdCtrl, setCmdCtrl] = useState<[string, string]>(['', '']);
    const cmdState = useMemo(() => {
        if (['control', 'command'].includes(cmdCtrl[1].toLowerCase()) && cmdCtrl[0].toLowerCase() === 'a') {
            return 'bg-slate-500 text-black';
        }

        return '';
    }, [cmdCtrl]);

    const updateKeys = useCallback(
        (e: KeyboardEvent) => {
            const {key} = e;
            if (key === cmdCtrl[0] && key === cmdCtrl[1]) return;
            setCmdCtrl([key, cmdCtrl[0]]);
        },
        [cmdCtrl, setCmdCtrl],
    );

    // Dark = #000001; Light = #222222;
    const planeMaterial = new MeshLambertMaterial({color: '#ffffff'});

    const introMessageStyles = useSpring({
        opacity: animationStages.introMessage ? 1 : 0,
        scale: animationStages.introMessage ? 1 : 0,
        'position-x': animationStages.introMessage2 ? -10 : 0,
    });

    useEffect(() => {
        setTimeout(() => {
            setAnimationStages({
                ...initAnimationStages,
                introMessage: true,
            });
        }, 2000);

        setTimeout(() => {
            setAnimationStages({
                ...initAnimationStages,
                introMessage: true,
                introMessage2: true,
            });

            setTimeout(() => {
                animateText('Use your keyboard to enter commands!', setSubtitleText);
            }, 500);
        }, 2500);
    }, []);

    useEffect(() => {
        document.addEventListener('keydown', updateKeys);
        return () => {
            document.removeEventListener('keydown', updateKeys);
        };
    }, [updateKeys]);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {/* eslint-disable */}
            <main
                className={styles.main}
                onClick={() => {
                    if (cmdBox.current) cmdBox.current.focus();
                }}
            >
            {/* eslint-enable */}
                <FocusLock>
                    <input
                        type="text"
                        className="fixed bottom-5 right-5 z-20 opacity-0"
                        ref={cmdBox}
                        onChange={(e) => {
                            setCmdText(e.target.value);
                        }}
                        // eslint-disable-next-line
                        autoFocus
                    />
                </FocusLock>

                <div className="mockup-code fixed bottom-5 right-5 z-10 w-[calc(100%_-_2.5rem)] max-w-2xl">
                    <pre data-prefix="$">
                        <code className={cmdState}>{cmdText}</code>
                    </pre>
                </div>
                <div className={styles.canvasWrap}>
                    <Canvas shadows="soft">
                        <ambientLight intensity={1} />
                        <pointLight intensity={6} decay={0.1} position={[60, 100, 60]} color="#3377ff" castShadow />

                        <pointLight intensity={6} position={[-120, 40, -100]} color="#ffffff" />

                        <animated.group {...introMessageStyles}>
                            <Text position={[10, 10, -30]} rotation-x={-Math.PI / 4}>
                                {!animationStages.introMessage2 ? 'hello, ' : 'hello, user.'}
                            </Text>
                        </animated.group>

                        <Text position={[-16, 5, -25]} rotation-x={-Math.PI / 4} scale={0.35}>
                            {subtitleText}
                        </Text>

                        <Physics gravity={[0, -50, 0]}>
                            <Keyboard
                                scale={0.08}
                                position={[0, 20, 0]}
                                rotation-x={Math.PI / 4}
                                castShadow
                                keysPressed={subtitleText}
                            />
                            <Ground
                                ref={groundRef}
                                scale={400}
                                rotation-x={-Math.PI / 2}
                                position={[0, -7, 0]}
                                receiveShadow
                                material={planeMaterial}
                            />
                        </Physics>

                        <OrthographicCamera
                            makeDefault
                            zoom={8}
                            near={-100}
                            far={280}
                            position={[-67, 38, 50]}
                            rotation-x={-Math.PI / 4}
                            rotation-y={-Math.PI / 4}
                            rotation-z={-Math.PI / 5}
                        />

                        {/* <OrbitControls /> */}
                        {/* <Stats /> */}
                    </Canvas>
                </div>
            </main>
        </>
    );
};

export default Home;
